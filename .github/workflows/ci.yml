name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Job 1: Verify and test on PRs
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up NX SHAs for affected commands
        uses: nrwl/nx-set-shas@v4

      - name: Run affected lint
        run: pnpm nx affected -t lint --parallel=3

      - name: Run affected tests
        run: pnpm nx affected -t test --parallel=3 --coverage

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/
          retention-days: 30

  # Job 2: Verify, build and test on main branch
  build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up NX SHAs for affected commands
        uses: nrwl/nx-set-shas@v4

      - name: Run affected lint
        run: pnpm nx affected -t lint --parallel=3

      - name: Run affected tests
        run: pnpm nx affected -t test --parallel=3

      - name: Run affected builds
        run: pnpm nx affected -t build --parallel=3

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: packages/*/dist/
          retention-days: 7

      # TEMPORARY: Auto-bump patch version and publish on main branch 
      - name: Auto-bump patch version
        run: |
          echo "🔍 Getting latest published version..."
          
          # Get latest version from NPM, fallback to current if not found
          LATEST_NPM_VERSION=$(npm view @growcado/sdk version 2>/dev/null || echo "0.0.1")
          CURRENT_VERSION=$(node -p "require('./packages/sdk/package.json').version")
          
          echo "Latest NPM version: $LATEST_NPM_VERSION"
          echo "Current local version: $CURRENT_VERSION"
          
          # Parse version and increment patch
          IFS='.' read -r major minor patch <<< "$LATEST_NPM_VERSION"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
          
          echo "New version will be: $NEW_VERSION"
          
          # Update SDK package.json
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('packages/sdk/package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('packages/sdk/package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('Updated SDK to version $NEW_VERSION');
          "
          
          # Update React package.json
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('packages/react/package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('packages/react/package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('Updated React to version $NEW_VERSION');
          "

      - name: Prepare for publishing (temporary)
        run: |
          echo "🚀 Preparing packages for NPM publishing..."
          # Update React package to use published SDK version instead of workspace
          cd packages/react
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          sed -i.bak "s/\"@growcado\/sdk\": \"workspace:\*\"/\"@growcado\/sdk\": \"^$CURRENT_VERSION\"/" package.json
          cd ../..

      - name: Publish to NPM (temporary)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          CURRENT_VERSION=$(node -p "require('./packages/sdk/package.json').version")
          echo "🚀 Publishing @growcado/sdk@$CURRENT_VERSION..."
          cd packages/sdk
          npm publish --access public
          cd ../..
          
          echo "🚀 Publishing @growcado/react@$CURRENT_VERSION..." 
          cd packages/react
          npm publish --access public
          cd ../..
          
          echo "✅ Published both packages to NPM at version $CURRENT_VERSION" 