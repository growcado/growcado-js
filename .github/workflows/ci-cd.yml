name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Job 1: Build and test affected projects on PRs
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up NX SHAs for affected commands
        uses: nrwl/nx-set-shas@v4

      - name: Run affected lint
        run: pnpm nx affected -t lint --parallel=3

      - name: Run affected tests
        run: pnpm nx affected -t test --parallel=3 --coverage

      - name: Run affected builds
        run: pnpm nx affected -t build --parallel=3

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/
          retention-days: 30

  # Job 2: Release and publish on main branch
  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up NX SHAs for affected commands
        uses: nrwl/nx-set-shas@v4

      - name: Run affected lint
        run: pnpm nx affected -t lint --parallel=3

      - name: Run affected tests
        run: pnpm nx affected -t test --parallel=3

      - name: Run affected builds
        run: pnpm nx affected -t build --parallel=3

      - name: Check if there are publishable changes
        id: check-changes
        run: |
          # Check if any publishable packages are affected
          AFFECTED=$(pnpm nx show projects --affected --type lib --json)
          echo "affected-projects=$AFFECTED" >> $GITHUB_OUTPUT
          
          if echo "$AFFECTED" | grep -E '"@growcado/(sdk|react)"' > /dev/null; then
            echo "has-publishable-changes=true" >> $GITHUB_OUTPUT
            echo "ðŸ“¦ Found publishable changes in affected projects"
          else
            echo "has-publishable-changes=false" >> $GITHUB_OUTPUT
            echo "ðŸ“¦ No publishable changes detected"
          fi

      - name: Configure Git for version bumps
        if: steps.check-changes.outputs.has-publishable-changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Determine version bump type
        if: steps.check-changes.outputs.has-publishable-changes == 'true'
        id: version-bump
        run: |
          # Parse commit messages to determine version bump
          COMMIT_MESSAGES=$(git log --pretty=format:"%s" HEAD^..HEAD)
          
          if echo "$COMMIT_MESSAGES" | grep -E "^(feat(\(.+\))?!|fix(\(.+\))?!|BREAKING CHANGE)" > /dev/null; then
            echo "bump-type=major" >> $GITHUB_OUTPUT
            echo "ðŸš€ Major version bump detected"
          elif echo "$COMMIT_MESSAGES" | grep -E "^feat(\(.+\))?" > /dev/null; then
            echo "bump-type=minor" >> $GITHUB_OUTPUT
            echo "ðŸš€ Minor version bump detected"
          else
            echo "bump-type=patch" >> $GITHUB_OUTPUT
            echo "ðŸš€ Patch version bump detected"
          fi

      - name: Bump version
        if: steps.check-changes.outputs.has-publishable-changes == 'true'
        run: |
          node scripts/version.js ${{ steps.version-bump.outputs.bump-type }}
          
          # Get the new version for tagging
          NEW_VERSION=$(node -p "require('./packages/sdk/package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Commit version changes
          git add packages/*/package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin main

      - name: Create Git tag
        if: steps.check-changes.outputs.has-publishable-changes == 'true'
        run: |
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Publish packages
        if: steps.check-changes.outputs.has-publishable-changes == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "ðŸš€ Publishing packages..."
          node scripts/publish.js

      - name: Create GitHub Release
        if: steps.check-changes.outputs.has-publishable-changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## Changes
            
            This release includes the following changes:
            
            ${{ steps.check-changes.outputs.affected-projects }}
            
            ## Packages Published
            
            - @growcado/sdk@${{ env.NEW_VERSION }}
            - @growcado/react@${{ env.NEW_VERSION }}
          draft: false
          prerelease: false 