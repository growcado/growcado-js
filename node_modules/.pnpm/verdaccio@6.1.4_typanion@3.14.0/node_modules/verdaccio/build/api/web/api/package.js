"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = require("express");
var _lodash = _interopRequireDefault(require("lodash"));
var _config = require("@verdaccio/config");
var _middleware = require("@verdaccio/middleware");
var _tarball = require("@verdaccio/tarball");
var _utils = require("@verdaccio/utils");
var _constants = require("../../../lib/constants");
var _logger = require("../../../lib/logger");
var _utils2 = require("../../../lib/utils");
var _utils3 = require("./utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const getOrder = (order = 'asc') => {
  return order === 'asc';
};
function addPackageWebApi(storage, auth, config) {
  /* eslint new-cap:off */
  const pkgRouter = (0, _express.Router)();
  const can = (0, _middleware.allow)(auth, {
    beforeAll: (params, message) => {
      _logger.logger.debug(params, message);
    },
    afterAll: (params, message) => _logger.logger.debug(params, message)
  });
  const checkAllow = (name, remoteUser) => new Promise((resolve, reject) => {
    try {
      var _config$web, _config$web2;
      const isLoginEnabled = _lodash.default.isNil(config === null || config === void 0 ? void 0 : (_config$web = config.web) === null || _config$web === void 0 ? void 0 : _config$web.login) || (config === null || config === void 0 ? void 0 : (_config$web2 = config.web) === null || _config$web2 === void 0 ? void 0 : _config$web2.login) === true;
      const anonymousRemoteUser = (0, _config.createAnonymousRemoteUser)();
      const remoteUserAccess = !isLoginEnabled ? anonymousRemoteUser : remoteUser;
      auth.allow_access({
        packageName: name
      }, remoteUserAccess, (err, allowed) => {
        if (err) {
          resolve(false);
        }
        resolve(allowed);
      });
    } catch (err) {
      reject(err);
    }
  });

  // Get list of all visible package
  pkgRouter.get((0, _utils3.wrapPath)(_middleware.WebUrls.packages_all), function (req, res, next) {
    storage.getLocalDatabase(async function (err, packages) {
      if (err) {
        throw err;
      }
      async function processPackages(packages = []) {
        const permissions = [];
        const packgesCopy = packages.slice();
        for (const pkg of packgesCopy) {
          const pkgCopy = _objectSpread({}, pkg);
          pkgCopy.author = (0, _utils.formatAuthor)(pkg.author);
          try {
            const isAllowed = await checkAllow(pkg.name, req.remote_user);
            if (isAllowed) {
              if (config.web) {
                pkgCopy.author.avatar = (0, _utils.generateGravatarUrl)(pkgCopy.author.email, config.web.gravatar);
              }
              if (!_lodash.default.isNil(pkgCopy.dist) && !_lodash.default.isNull(pkgCopy.dist.tarball)) {
                pkgCopy.dist.tarball = (0, _tarball.getLocalRegistryTarballUri)(pkgCopy.dist.tarball, pkg.name, {
                  protocol: req.protocol,
                  headers: req.headers,
                  host: req.hostname
                }, config.url_prefix);
              }
              permissions.push(pkgCopy);
            }
          } catch (err) {
            _logger.logger.error({
              name: pkg.name,
              error: err
            }, 'permission process for @{name} has failed: @{error}');
            throw err;
          }
        }
        return permissions;
      }
      const {
        web
      } = config;
      // @ts-ignore
      const order = config.web ? getOrder(web.sort_packages) : true;
      try {
        next((0, _utils2.sortByName)(await processPackages(packages), order));
      } catch (error) {
        next(_utils2.ErrorCode.getInternalError());
      }
    });
  });

  // Get package readme
  pkgRouter.get([(0, _utils3.wrapPath)(_middleware.WebUrls.readme_package_scoped_version), (0, _utils3.wrapPath)(_middleware.WebUrls.readme_package_version)], can('access'), function (req, res, next) {
    const rawScope = req.params.scope; // May include '@'
    const scope = rawScope ? rawScope.slice(1) : null; // Remove '@' if present
    const packageName = scope ? (0, _utils2.addScope)(scope, req.params.package) : req.params.package;
    storage.getPackage({
      name: packageName,
      uplinksLook: true,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }
        res.set(_constants.HEADER_TYPE.CONTENT_TYPE, _constants.HEADERS.TEXT_PLAIN);
        next((0, _utils2.parseReadme)(info.name, info.readme));
      }
    });
  });
  pkgRouter.get([(0, _utils3.wrapPath)(_middleware.WebUrls.sidebar_scopped_package), (0, _utils3.wrapPath)(_middleware.WebUrls.sidebar_package)], can('access'), function (req, res, next) {
    const rawScope = req.params.scope; // May include '@'
    const scope = rawScope ? rawScope.slice(1) : null; // Remove '@' if present
    const packageName = scope ? (0, _utils2.addScope)(scope, req.params.package) : req.params.package;
    storage.getPackage({
      name: packageName,
      uplinksLook: true,
      keepUpLinkData: true,
      req,
      callback: function (err, info) {
        if (_lodash.default.isNil(err)) {
          const {
            v
          } = req.query;
          let sideBarInfo = _lodash.default.clone(info);
          sideBarInfo.versions = (0, _tarball.convertDistRemoteToLocalTarballUrls)(info, {
            protocol: req.protocol,
            headers: req.headers,
            host: req.hostname
          }, config.url_prefix).versions;
          if ((0, _utils2.isVersionValid)(info, v)) {
            // @ts-ignore
            sideBarInfo.latest = sideBarInfo.versions[v];
            sideBarInfo.latest.author = (0, _utils.formatAuthor)(sideBarInfo.latest.author);
          } else {
            var _sideBarInfo;
            sideBarInfo.latest = sideBarInfo.versions[info[_constants.DIST_TAGS].latest];
            if ((_sideBarInfo = sideBarInfo) !== null && _sideBarInfo !== void 0 && _sideBarInfo.latest) {
              sideBarInfo.latest.author = (0, _utils.formatAuthor)(sideBarInfo.latest.author);
            } else {
              res.status(_constants.HTTP_STATUS.NOT_FOUND);
              res.end();
              return;
            }
          }
          sideBarInfo = (0, _utils2.deleteProperties)(['readme', '_attachments', '_rev', 'name'], sideBarInfo);
          if (config.web) {
            sideBarInfo = (0, _utils.addGravatarSupport)(sideBarInfo, config.web.gravatar);
          } else {
            sideBarInfo = (0, _utils.addGravatarSupport)(sideBarInfo);
          }
          next(sideBarInfo);
        } else {
          res.status(_constants.HTTP_STATUS.NOT_FOUND);
          res.end();
        }
      }
    });
  });
  return pkgRouter;
}
var _default = exports.default = addPackageWebApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,