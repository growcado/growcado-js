"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PLUGIN_UI_PREFIX = exports.DEFAULT_PLUGIN_UI_THEME = void 0;
exports.loadTheme = loadTheme;
exports.localWebEndpointsApi = localWebEndpointsApi;
var _debug = _interopRequireDefault(require("debug"));
var _express = _interopRequireWildcard(require("express"));
var _lodash = _interopRequireDefault(require("lodash"));
var _core = require("@verdaccio/core");
var _loaders = require("@verdaccio/loaders");
var _logger = require("@verdaccio/logger");
var _middleware = require("@verdaccio/middleware");
var _api = _interopRequireDefault(require("./api"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('verdaccio:web');
const PLUGIN_UI_PREFIX = exports.PLUGIN_UI_PREFIX = 'verdaccio-theme';
const DEFAULT_PLUGIN_UI_THEME = exports.DEFAULT_PLUGIN_UI_THEME = '@verdaccio/ui-theme';
async function loadTheme(config) {
  if (_lodash.default.isNil(config.theme) === false) {
    var _config$serverSetting, _config$serverSetting2;
    const plugin = await (0, _loaders.asyncLoadPlugin)(config.theme, {
      config,
      logger: _logger.logger
    },
    // TODO: add types { staticPath: string; manifest: unknown; manifestFiles: unknown }
    function (plugin) {
      /**
               *
               - `staticPath`: is the same data returned in Verdaccio 5.
               - `manifest`: A webpack manifest object.
               - `manifestFiles`: A object with one property `js` and the array (order matters) of the manifest id to be loaded in the template dynamically.
               */
      return plugin.staticPath && plugin.manifest && plugin.manifestFiles;
    }, true, (_config$serverSetting = config === null || config === void 0 ? void 0 : (_config$serverSetting2 = config.serverSettings) === null || _config$serverSetting2 === void 0 ? void 0 : _config$serverSetting2.pluginPrefix) !== null && _config$serverSetting !== void 0 ? _config$serverSetting : PLUGIN_UI_PREFIX, _core.PLUGIN_CATEGORY.THEME);
    if (plugin.length > 1) {
      _logger.logger.warn('multiple ui themes are not supported; only the first plugin is used');
    }
    return _lodash.default.head(plugin);
  }
}
function localWebEndpointsApi(auth, storage, config) {
  // eslint-disable-next-line new-cap
  const route = (0, _express.Router)();
  // validate all of these params as a package name
  // this might be too harsh, so ask if it causes trouble=
  route.param('package', _middleware.validatePackage);
  route.param('filename', _middleware.validateName);
  route.param('version', _middleware.validateName);
  route.use(_express.default.urlencoded({
    extended: false
  }));
  route.use(_middleware.setSecurityWebHeaders);
  route.use(auth.apiJWTmiddleware());
  route.use((0, _api.default)(auth, storage, config));
  return route;
}
var _default = async (config, auth, storage, logger) => {
  let pluginOptions = await loadTheme(config);
  if (!pluginOptions) {
    pluginOptions = require(DEFAULT_PLUGIN_UI_THEME)(config.web);
    logger.info({
      name: DEFAULT_PLUGIN_UI_THEME,
      pluginCategory: _core.PLUGIN_CATEGORY.THEME
    }, 'plugin @{name} successfully loaded (@{pluginCategory})');
  }
  // eslint-disable-next-line new-cap
  const router = (0, _express.Router)();
  // @ts-ignore
  router.use('/', (0, _middleware.renderWebMiddleware)(config, auth.apiJWTmiddleware(), pluginOptions));
  // web endpoints, search, packages, etc
  router.use(localWebEndpointsApi(auth, storage, config));
  return router;
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,