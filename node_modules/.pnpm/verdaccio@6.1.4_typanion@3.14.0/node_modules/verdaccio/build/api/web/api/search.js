"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = require("express");
var _middleware = require("@verdaccio/middleware");
var _searchIndexer = require("@verdaccio/search-indexer");
var _constants = require("../../../lib/constants");
var _utils = require("./utils");
function addSearchWebApi(storage, auth) {
  /* eslint new-cap:off */
  const route = (0, _express.Router)();
  // Search package
  route.get((0, _utils.wrapPath)(_middleware.WebUrls.search), async function (req, _res, next) {
    const term = req.params.anything;
    const indexer = await _searchIndexer.SearchMemoryIndexer.query(term);
    const packages = [];
    const results = indexer.hits;
    const getPackageInfo = function (i) {
      storage.getPackage({
        name: results[i].id,
        uplinksLook: false,
        callback: (err, entry) => {
          if (!err && entry) {
            auth.allow_access({
              packageName: entry.name
            }, req.remote_user, function (err, allowed) {
              if (err || !allowed) {
                return;
              }
              packages.push(entry.versions[entry[_constants.DIST_TAGS].latest]);
            });
          }
          if (i >= results.length - 1) {
            next(packages);
          } else {
            getPackageInfo(i + 1);
          }
        }
      });
    };
    if (results.length) {
      getPackageInfo(0);
    } else {
      next([]);
    }
  });
  return route;
}
var _default = exports.default = addSearchWebApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsInJlcXVpcmUiLCJfbWlkZGxld2FyZSIsIl9zZWFyY2hJbmRleGVyIiwiX2NvbnN0YW50cyIsIl91dGlscyIsImFkZFNlYXJjaFdlYkFwaSIsInN0b3JhZ2UiLCJhdXRoIiwicm91dGUiLCJSb3V0ZXIiLCJnZXQiLCJ3cmFwUGF0aCIsIldlYlVybHMiLCJzZWFyY2giLCJyZXEiLCJfcmVzIiwibmV4dCIsInRlcm0iLCJwYXJhbXMiLCJhbnl0aGluZyIsImluZGV4ZXIiLCJTZWFyY2hNZW1vcnlJbmRleGVyIiwicXVlcnkiLCJwYWNrYWdlcyIsInJlc3VsdHMiLCJoaXRzIiwiZ2V0UGFja2FnZUluZm8iLCJpIiwiZ2V0UGFja2FnZSIsIm5hbWUiLCJpZCIsInVwbGlua3NMb29rIiwiY2FsbGJhY2siLCJlcnIiLCJlbnRyeSIsImFsbG93X2FjY2VzcyIsInBhY2thZ2VOYW1lIiwicmVtb3RlX3VzZXIiLCJhbGxvd2VkIiwicHVzaCIsInZlcnNpb25zIiwiRElTVF9UQUdTIiwibGF0ZXN0IiwibGVuZ3RoIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvd2ViL2FwaS9zZWFyY2gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5cbmltcG9ydCB7IFdlYlVybHMgfSBmcm9tICdAdmVyZGFjY2lvL21pZGRsZXdhcmUnO1xuaW1wb3J0IHsgU2VhcmNoTWVtb3J5SW5kZXhlciB9IGZyb20gJ0B2ZXJkYWNjaW8vc2VhcmNoLWluZGV4ZXInO1xuaW1wb3J0IHsgTWFuaWZlc3QgfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcblxuaW1wb3J0IEF1dGggZnJvbSAnLi4vLi4vLi4vbGliL2F1dGgnO1xuaW1wb3J0IHsgRElTVF9UQUdTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgU3RvcmFnZSBmcm9tICcuLi8uLi8uLi9saWIvc3RvcmFnZSc7XG5pbXBvcnQgeyAkTmV4dEZ1bmN0aW9uVmVyLCAkUmVxdWVzdEV4dGVuZCwgJFJlc3BvbnNlRXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgd3JhcFBhdGggfSBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gYWRkU2VhcmNoV2ViQXBpKHN0b3JhZ2U6IFN0b3JhZ2UsIGF1dGg6IEF1dGgpOiBSb3V0ZXIge1xuICAvKiBlc2xpbnQgbmV3LWNhcDpvZmYgKi9cbiAgY29uc3Qgcm91dGUgPSBSb3V0ZXIoKTtcbiAgLy8gU2VhcmNoIHBhY2thZ2VcbiAgcm91dGUuZ2V0KFxuICAgIHdyYXBQYXRoKFdlYlVybHMuc2VhcmNoKSxcbiAgICBhc3luYyBmdW5jdGlvbiAoXG4gICAgICByZXE6ICRSZXF1ZXN0RXh0ZW5kLFxuICAgICAgX3JlczogJFJlc3BvbnNlRXh0ZW5kLFxuICAgICAgbmV4dDogJE5leHRGdW5jdGlvblZlclxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgY29uc3QgdGVybSA9IHJlcS5wYXJhbXMuYW55dGhpbmc7XG4gICAgICBjb25zdCBpbmRleGVyID0gKGF3YWl0IFNlYXJjaE1lbW9yeUluZGV4ZXIucXVlcnkodGVybSkpIGFzIGFueTtcbiAgICAgIGNvbnN0IHBhY2thZ2VzOiBhbnlbXSA9IFtdO1xuICAgICAgY29uc3QgcmVzdWx0cyA9IGluZGV4ZXIuaGl0cztcblxuICAgICAgY29uc3QgZ2V0UGFja2FnZUluZm8gPSBmdW5jdGlvbiAoaSk6IHZvaWQge1xuICAgICAgICBzdG9yYWdlLmdldFBhY2thZ2Uoe1xuICAgICAgICAgIG5hbWU6IHJlc3VsdHNbaV0uaWQsXG4gICAgICAgICAgdXBsaW5rc0xvb2s6IGZhbHNlLFxuICAgICAgICAgIGNhbGxiYWNrOiAoZXJyLCBlbnRyeTogTWFuaWZlc3QpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyICYmIGVudHJ5KSB7XG4gICAgICAgICAgICAgIGF1dGguYWxsb3dfYWNjZXNzKFxuICAgICAgICAgICAgICAgIHsgcGFja2FnZU5hbWU6IGVudHJ5Lm5hbWUgfSxcbiAgICAgICAgICAgICAgICByZXEucmVtb3RlX3VzZXIsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgYWxsb3dlZCk6IHZvaWQge1xuICAgICAgICAgICAgICAgICAgaWYgKGVyciB8fCAhYWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHBhY2thZ2VzLnB1c2goZW50cnkudmVyc2lvbnNbZW50cnlbRElTVF9UQUdTXS5sYXRlc3RdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpID49IHJlc3VsdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBuZXh0KHBhY2thZ2VzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGdldFBhY2thZ2VJbmZvKGkgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICBnZXRQYWNrYWdlSW5mbygwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQoW10pO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICByZXR1cm4gcm91dGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZFNlYXJjaFdlYkFwaTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsY0FBQSxHQUFBRixPQUFBO0FBSUEsSUFBQUcsVUFBQSxHQUFBSCxPQUFBO0FBR0EsSUFBQUksTUFBQSxHQUFBSixPQUFBO0FBRUEsU0FBU0ssZUFBZUEsQ0FBQ0MsT0FBZ0IsRUFBRUMsSUFBVSxFQUFVO0VBQzdEO0VBQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUFDLGVBQU0sRUFBQyxDQUFDO0VBQ3RCO0VBQ0FELEtBQUssQ0FBQ0UsR0FBRyxDQUNQLElBQUFDLGVBQVEsRUFBQ0MsbUJBQU8sQ0FBQ0MsTUFBTSxDQUFDLEVBQ3hCLGdCQUNFQyxHQUFtQixFQUNuQkMsSUFBcUIsRUFDckJDLElBQXNCLEVBQ1A7SUFDZixNQUFNQyxJQUFJLEdBQUdILEdBQUcsQ0FBQ0ksTUFBTSxDQUFDQyxRQUFRO0lBQ2hDLE1BQU1DLE9BQU8sR0FBSSxNQUFNQyxrQ0FBbUIsQ0FBQ0MsS0FBSyxDQUFDTCxJQUFJLENBQVM7SUFDOUQsTUFBTU0sUUFBZSxHQUFHLEVBQUU7SUFDMUIsTUFBTUMsT0FBTyxHQUFHSixPQUFPLENBQUNLLElBQUk7SUFFNUIsTUFBTUMsY0FBYyxHQUFHLFNBQUFBLENBQVVDLENBQUMsRUFBUTtNQUN4Q3JCLE9BQU8sQ0FBQ3NCLFVBQVUsQ0FBQztRQUNqQkMsSUFBSSxFQUFFTCxPQUFPLENBQUNHLENBQUMsQ0FBQyxDQUFDRyxFQUFFO1FBQ25CQyxXQUFXLEVBQUUsS0FBSztRQUNsQkMsUUFBUSxFQUFFQSxDQUFDQyxHQUFHLEVBQUVDLEtBQWUsS0FBVztVQUN4QyxJQUFJLENBQUNELEdBQUcsSUFBSUMsS0FBSyxFQUFFO1lBQ2pCM0IsSUFBSSxDQUFDNEIsWUFBWSxDQUNmO2NBQUVDLFdBQVcsRUFBRUYsS0FBSyxDQUFDTDtZQUFLLENBQUMsRUFDM0JmLEdBQUcsQ0FBQ3VCLFdBQVcsRUFDZixVQUFVSixHQUFHLEVBQUVLLE9BQU8sRUFBUTtjQUM1QixJQUFJTCxHQUFHLElBQUksQ0FBQ0ssT0FBTyxFQUFFO2dCQUNuQjtjQUNGO2NBRUFmLFFBQVEsQ0FBQ2dCLElBQUksQ0FBQ0wsS0FBSyxDQUFDTSxRQUFRLENBQUNOLEtBQUssQ0FBQ08sb0JBQVMsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxDQUNGLENBQUM7VUFDSDtVQUVBLElBQUlmLENBQUMsSUFBSUgsT0FBTyxDQUFDbUIsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQjNCLElBQUksQ0FBQ08sUUFBUSxDQUFDO1VBQ2hCLENBQUMsTUFBTTtZQUNMRyxjQUFjLENBQUNDLENBQUMsR0FBRyxDQUFDLENBQUM7VUFDdkI7UUFDRjtNQUNGLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJSCxPQUFPLENBQUNtQixNQUFNLEVBQUU7TUFDbEJqQixjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUMsTUFBTTtNQUNMVixJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ1Y7RUFDRixDQUNGLENBQUM7RUFFRCxPQUFPUixLQUFLO0FBQ2Q7QUFBQyxJQUFBb0MsUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFY3pDLGVBQWUiLCJpZ25vcmVMaXN0IjpbXX0=