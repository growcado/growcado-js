"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileToken = compileToken;
var css_what_1 = require("css-what");
var boolbase = require("boolbase");
var selectors_js_1 = require("./helpers/selectors.js");
var general_js_1 = require("./general.js");
var subselects_js_1 = require("./pseudo-selectors/subselects.js");
var querying_js_1 = require("./helpers/querying.js");
var DESCENDANT_TOKEN = { type: css_what_1.SelectorType.Descendant };
var FLEXIBLE_DESCENDANT_TOKEN = {
    type: "_flexibleDescendant",
};
var SCOPE_TOKEN = {
    type: css_what_1.SelectorType.Pseudo,
    name: "scope",
    data: null,
};
/*
 * CSS 4 Spec (Draft): 3.4.1. Absolutizing a Relative Selector
 * http://www.w3.org/TR/selectors4/#absolutizing
 */
function absolutize(token, _a, context) {
    var adapter = _a.adapter;
    // TODO Use better check if the context is a document
    var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function (e) {
        return e === subselects_js_1.PLACEHOLDER_ELEMENT ||
            (adapter.isTag(e) && (0, querying_js_1.getElementParent)(e, adapter) !== null);
    }));
    for (var _i = 0, token_1 = token; _i < token_1.length; _i++) {
        var t = token_1[_i];
        if (t.length > 0 &&
            (0, selectors_js_1.isTraversal)(t[0]) &&
            t[0].type !== css_what_1.SelectorType.Descendant) {
            // Don't continue in else branch
        }
        else if (hasContext && !t.some(selectors_js_1.includesScopePseudo)) {
            t.unshift(DESCENDANT_TOKEN);
        }
        else {
            continue;
        }
        t.unshift(SCOPE_TOKEN);
    }
}
function compileToken(token, options, ctx) {
    token.forEach(selectors_js_1.sortRules);
    var _a = options.context, context = _a === void 0 ? ctx : _a, _b = options.rootFunc, rootFunc = _b === void 0 ? boolbase.trueFunc : _b;
    var isArrayContext = Array.isArray(context);
    var finalContext = context && (Array.isArray(context) ? context : [context]);
    // Check if the selector is relative
    if (options.relativeSelector !== false) {
        absolutize(token, options, finalContext);
    }
    else if (token.some(function (t) { return t.length > 0 && (0, selectors_js_1.isTraversal)(t[0]); })) {
        throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");
    }
    var shouldTestNextSiblings = false;
    var query = boolbase.falseFunc;
    combineLoop: for (var _i = 0, token_2 = token; _i < token_2.length; _i++) {
        var rules = token_2[_i];
        if (rules.length >= 2) {
            var first = rules[0], second = rules[1];
            if (first.type !== css_what_1.SelectorType.Pseudo || first.name !== "scope") {
                // Ignore
            }
            else if (isArrayContext &&
                second.type === css_what_1.SelectorType.Descendant) {
                rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
            }
            else if (second.type === css_what_1.SelectorType.Adjacent ||
                second.type === css_what_1.SelectorType.Sibling) {
                shouldTestNextSiblings = true;
            }
        }
        var next = rootFunc;
        var hasExpensiveSubselector = false;
        for (var _c = 0, rules_1 = rules; _c < rules_1.length; _c++) {
            var rule = rules_1[_c];
            next = (0, general_js_1.compileGeneralSelector)(next, rule, options, finalContext, compileToken, hasExpensiveSubselector);
            var quality = (0, selectors_js_1.getQuality)(rule);
            if (quality === 0) {
                hasExpensiveSubselector = true;
            }
            // If the sub-selector won't match any elements, skip it.
            if (next === boolbase.falseFunc)
                continue combineLoop;
        }
        // If we have a function that always returns true, we can stop here.
        if (next === rootFunc)
            return rootFunc;
        query = query === boolbase.falseFunc ? next : or(query, next);
    }
    query.shouldTestNextSiblings = shouldTestNextSiblings;
    return query;
}
function or(a, b) {
    return function (elem) { return a(elem) || b(elem); };
}
//# sourceMappingURL=compile.js.map